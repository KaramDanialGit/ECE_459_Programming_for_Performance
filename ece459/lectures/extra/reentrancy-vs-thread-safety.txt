\include{header}

\begin{document}

\lecture{Extra --- Reentrancy}{\term}{Patrick Lam}

\section*{Reentrancy versus Thread-Safety}
On a different note, we're going to discuss the distinction, in slightly more detail, between reentrant functions and thread-safe functions. There is overlap, but these terms are actually different.

A function is \emph{reentrant} if it can be suspended in the middle
and re-entered, or called again, before the previous execution
returns.

Reentrant does not always mean {\bf thread-safe} (although it usually is).\
Recall: {\bf thread-safe} is essentially ``no data races''. The distinction is moot if the function only modifies local data, e.g. {\tt sin()}.
Those functions are both reentrant and thread-safe.

\paragraph{Example.} Courtesy of Wikipedia (with modifications), here's a program (to the left) and its trace (to right):
\begin{center}
\begin{tabular}{ll}
\begin{minipage}{.5\textwidth}
  \begin{lstlisting}[language=C]
int t;

void swap(int *x, int *y) {
    t = *x;
    *x = *y;
    // interrupt might invoke isr() here!
    *y = t;
}

void isr() {
    int x = 1, y = 2;
    swap(&x, &y);
}
...
int a = 3, b = 4;
...
    swap(&a, &b);
  \end{lstlisting}
\end{minipage}
&
\begin{minipage}{.4\textwidth}
  \begin{lstlisting}
call swap(&a, &b);
 t = *x;                // t = 3 (a)
 *x = *y;               // a = 4 (b)
 call isr();
    x = 1; y = 2;
    call swap(&x, &y)
    t = *x;             // t = 1 (x)
    *x = *y;            // x = 2 (y)
    *y = t;             // y = 1
 *y = t;                // b = 1

Final values:
a = 4, b = 1

Expected values:
a = 4, b = 3
  \end{lstlisting}
\end{minipage}
\end{tabular}
\end{center}


We can fix the example by storing the global variable in stack variable
{\tt s}, as follows.
\begin{center}
\begin{tabular}{ll}
\begin{minipage}{.5\textwidth}
  \begin{lstlisting}[escapechar=@,language=C]
int t;

void swap(int *x, int *y) {
    int s;

    @{\bf s = t}@;  // save global variable
    t = *x;
    *x = *y;
    // interrupt might invoke isr() here!
    *y = t;
    @{\bf t = s}@;  // restore global variable
}

void isr() {
    int x = 1, y = 2;
    swap(&x, &y);
}
...
int a = 3, b = 4;
...
    swap(&a, &b);
  \end{lstlisting}
\end{minipage} &
\begin{minipage}{.5\textwidth}
  \begin{lstlisting}
call swap(&a, &b);
s = t;                 // s = UNDEFINED
t = *x;                // t = 3 (a)
*x = *y;               // a = 4 (b)
call isr();
    x = 1; y = 2;
    call swap(&x, &y)
    s = t;             // s = 3
    t = *x;            // t = 1 (x)
    *x = *y;           // x = 2 (y)
    *y = t;            // y = 1
    t = s;             // t = 3
*y = t;                // b = 3
t = s;                 // t = UNDEFINED

Final values:
a = 4, b = 3

Expected values:
a = 4, b = 3
  \end{lstlisting}
\end{minipage}
\end{tabular}
\end{center}

The obvious question: is the previous reentrant code also thread-safe?
(This is more what we're concerned about in this course.)

  Let's see. Consider two calls to the reentrant swap:\\ \verb+    swap(a, b)+, {\tt swap(c, d)} with {\tt a = 1, b = 2, c = 3, d = 4}.

  \begin{lstlisting}
    global: t

    /* thread 1 */                       /* thread 2 */
    a = 1, b = 2;
    s = t;    // s = UNDEFINED
    t = a;    // t = 1
                                         c = 3, d = 4;
                                         s = t;    // s = 1
                                         t = c;    // t = 3
                                         c = d;    // c = 4
                                         d = t;    // d = 3
    a = b;    // a = 2
    b = t;    // b = 3
    t = s;    // t = UNDEFINED
                                         t = s;    // t = 1

    Final values:
    a = 2, b = 3, c = 4, d = 3, t = 1

    Expected values:
    a = 2, b = 1, c = 4, d = 3, t = UNDEFINED
  \end{lstlisting}

To recap what we know so far: re-entrant does not always mean thread-safe. (But, for most sane implementations, reentrant is also thread-safe.)

But, are {\bf thread-safe} functions reentrant?
Nope! Consider:

  \begin{lstlisting}[language=C]
int f() {
    lock();
    // protected code
    unlock();
}
  \end{lstlisting}

Recall:  Reentrant functions can be suspended in the middle of execution
    and called again before the previous execution completes.

{\tt f()} obviously isn't reentrant. Plus, it will deadlock\footnote{I'm talking about lock implementations which don't maintain a lock counter; you can request Java locks multiple times in the same thread and everything will be fine, but not pthreads locks.}.

Interrupt handling is more for systems programming, so the topic of reentrancy may or may not come
up again.

To sum up, here's the difference between reentrant and thread-safe functions:

  {\bf Reentrancy.}
  \begin{itemize}
    \item Has nothing to do with threads---assumes a {\bf single thread}.
    \item Reentrant means the execution can context switch at any point in
      in a function, call the {\bf same function}, and {\bf complete} before
      returning to the original function call.
    \item Function's result does not depend on where the context switch happens.
  \end{itemize}

  {\bf Thread-safety.}
  \begin{itemize}
    \item Result does not depend on any interleaving of threads from
      concurrency or parallelism.
    \item No unexpected results from multiple concurrent executions of the function.
  \end{itemize}

If it helps, here's another definition of thread-safety.
\begin{quote}
  ``A function whose effect, when called by two or more threads, is guaranteed to
  be as if the threads each executed the function one after another, in an
  undefined order, even if the actual execution is interleaved.''
\end{quote}

\paragraph{Good Example of an Exam Question.} Consider the following function.

  \begin{lstlisting}[language=C]
void swap(int *x, int *y) {
    int t;
    t = *x;
    *x = *y;
    *y = t;
}
  \end{lstlisting}

  \begin{itemize}
    \item Is the above code thread-safe?
    \item Write some expected results for running two calls in parallel.
    \item Argue these expected results always hold, or show an example where
      they do not.
  \end{itemize}

